import re
import requests
import urllib
import bs4
import queue
import sys
import json
from yelp.client import Client
from yelp.oauth1_authenticator import Oauth1Authenticator
import oauth2
from collections import deque
import rauth
from rauth import OAuth1Session

# Make calls to OpenTable, Yelp, and Google Places APIs to obtain data

google_API_key = 'AIzaSyCbwSe0OLd9oS25SOonEyvj3o83PAj4OTg'

def get_opentable_results():
    '''
    Obtain initial set of sit-down restaurants from OpenTable
    '''
    chicago_ot_restaurants = []
    for pagenum in range(8):
        url = 'https://opentable.herokuapp.com/api/restaurants?city=Chicago&per_page=100&page=' + str(pagenum)
        response = requests.get(url)
        chicago_ot = response.json()
        chicago_ot_restaurants.append(chicago_ot['restaurants'])

    chicago_ot_restaurants = [dic for i in range(8) for dic in chicago_ot_restaurants[i]]

    return chicago_ot_restaurants

def get_google():
    '''
    Using the results from the OpenTable API, make calls to Google Places API using address and coordinates to  
    '''
    google_index = {}

    for call in chicago_ot_restaurants:
        address = call['address']
        lat = call['lat']
        lon = call['lng']


        query = str.replace(address, ' ', '+')
        search_url = 'https://maps.googleapis.com/maps/api/place/textsearch/json?location=' \
        + str(lat) + ','+ str(lon) + '&query=' + query +'&type=restaurant&key=' + google_API_key
                        
        response = requests.get(search_url)
        search = response.json()
        if len(search['results']) > 0:
            place_id = search['results'][0]['place_id']
            
            insert = 'placeid=%s' % place_id
            url = 'https://maps.googleapis.com/maps/api/place/details/json?'+ insert +'&key=' + google_API_key
            a = requests.get(url)
            obj = a.json()
            if 'result' in obj:
                google_index[call['name']] = obj['result']      
                                
    return google_index

def get_review_dic():
    '''
    Make dictionary of reviews for each restaurant from Google Places dataset
    '''
    review_dic = {}
    for call in big_google:
        if 'reviews' in big_google[call]:
            reviews = big_google[call]['reviews']
            review_dic[call] = []
            for review in reviews:
                review_dic[call].append(review['text'])
    return review_dic



def get_yelp_results():
    '''
    Get yelp results using phone search API from phone numbers from OT
    '''
    consumer_key = "MTzuVjKQZCEcQAqcJR4PuA"
    consumer_secret = "VIKI3HCnTitDaFWGV-rgpmMMRH0"
    token = "T6KDelwf6GY9lDuegylzmBohFjAabmKl"
    token_secret = "bJF2MqIjjQm-V2Pe35awiea6MFQ"

    session = rauth.OAuth1Session(
        consumer_key = consumer_key, consumer_secret = consumer_secret, access_token = token, 
        access_token_secret = token_secret)

    final_results = {}
    for restaurant in chicago_ot_restaurants:
        first = restaurant['phone'].replace('-', '')
        second = first.replace('x', '')
        phone_no = second[0:10]
    
        params = {}
        params['phone'] = phone_no

        request = session.get('https://api.yelp.com/v2/phone_search', params = params)
        results = request.json()
        final_results[restaurant['name']] = results

    session.close()
    return final_results

def get_google_reviews(data):
    '''
    Using the dictionary built from the Yelp API, make calls to the Google Places API to get reviews

    We used this to make a review dictionary before pulling other data from Google because we needed to test 
    other code.
    '''
    review_index = {}
    for call in data:
        if 'error' not in call:
            restaurants = call['businesses']
            for restaurant in restaurants:
                if restaurant['is_closed'] == False:
                    if len(restaurant['location']['address']) > 0:
                        restaurant_name = restaurant['name']
                        review_index[restaurant_name] = []
                        

                        address = restaurant['location']['address'][0]
                        lat = restaurant['location']['coordinate']['latitude']
                        lon = restaurant['location']['coordinate']['longitude']

                        query = str.replace(address, ' ', '+')
                        search_url = 'https://maps.googleapis.com/maps/api/place/textsearch/json?location=' \
                        + str(lat) + ','+ str(lon) + '&query=' + query +'&type=restaurant&key=' + google_API_key
                        
                        response = requests.get(search_url)
                        search = response.json()
                        if len(search['results']) > 0:
                            place_id = search['results'][0]['place_id']
                            
                            insert = 'placeid=%s' % place_id
                            url = 'https://maps.googleapis.com/maps/api/place/details/json?'+ insert +'&key=' + google_API_key
                            a = requests.get(url)
                            obj = a.json()
                            if 'result' in obj:
                                if 'reviews' in obj['result']:
                                    reviews = obj['result']['reviews']
                                    for review in reviews:
                                        review_index[restaurant_name].append(review['text'])
              
                                
    return review_index

def get_google_prices_hours(data):
    '''
    Using the dictionary built from the Yelp API, make calls to the Google API to get price level and hours. 
    This was done in a separate function for debugging purposes. We also needed the reviews data more urgently.
    '''
    ph_index = {}
    for call in data:
        if 'error' not in call:
            restaurants = call['businesses']
            for restaurant in restaurants:
                if restaurant['is_closed'] == False:
                    if len(restaurant['location']['address']) > 0:
                        restaurant_name = restaurant['name']
                        ph_index[restaurant_name] = {}
                        

                        address = restaurant['location']['address'][0]
                        lat = restaurant['location']['coordinate']['latitude']
                        lon = restaurant['location']['coordinate']['longitude']

                        query = str.replace(address, ' ', '+')
                        search_url = 'https://maps.googleapis.com/maps/api/place/textsearch/json?location=' \
                        + str(lat) + ','+ str(lon) + '&query=' + query +'&type=restaurant&key=' + google_API_key
                        
                        response = requests.get(search_url)
                        search = response.json()
                        if len(search['results']) > 0:
                            place_id = search['results'][0]['place_id']
                            
                            insert = 'placeid=%s' % place_id
                            url = 'https://maps.googleapis.com/maps/api/place/details/json?'+ insert +'&key=' + google_API_key
                            a = requests.get(url)
                            obj = a.json()
                            if 'result' in obj:
                                if 'price_level' in obj['result']:
                                    price = obj['result']['price_level']
                                    ph_index[restaurant_name]['price'] = price
                                if 'opening_hours' in obj['result']:
                                    ph_index[restaurant_name]['hours'] = obj['result']['opening_hours']
                                                      
    return ph_index






